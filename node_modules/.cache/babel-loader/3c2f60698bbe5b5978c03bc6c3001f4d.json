{"ast":null,"code":"var _jsxFileName = \"/Users/abhishekkumar/project folder/notebook/inotebook/src/context/notes/NoteState.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial); // Get all notes  \n\n  const getnotes = async () => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n  }; // Add note\n\n\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    }); // const json = response.json();\n\n    const note = {\n      _id: \"622b0551890f1d12473288ad7\",\n      user: \"6228bd7cab58086b170f2cb2\",\n      title: title,\n      description: description,\n      tag: tag,\n      date: \"2022-03-11T08:16:17.292Z\",\n      __v: 0\n    };\n    setNotes(notes.concat(note));\n  }; // delete note\n\n\n  const deleteNote = id => {\n    // console.log(\"deleting the note with \"+ id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  }; // Edit note\n\n\n  const editNote = async (id, title, descripttion, tag) => {\n    const response = await fetch(`${host}/api/notes/updateNote/${id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n      },\n      body: JSON.stringify({\n        title,\n        descripttion,\n        tag\n      })\n    });\n    const json = response.json(); // logic to edit note in client\n\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n\n      if (element._id === id) {\n        element.title = title, element.descripttion = descripttion, element.tag = tag;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getnotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["/Users/abhishekkumar/project folder/notebook/inotebook/src/context/notes/NoteState.js"],"names":["useState","NoteContext","NoteState","props","host","notesInitial","notes","setNotes","getnotes","response","fetch","method","headers","json","console","log","addNote","title","description","tag","body","JSON","stringify","note","_id","user","date","__v","concat","deleteNote","id","newNotes","filter","editNote","descripttion","index","length","element","children"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\n\nconst NoteState = (props) => {\n    const host = \"http://localhost:5000\";\n    const notesInitial = [];\n\n    const [notes, setNotes] = useState(notesInitial);\n\n    // Get all notes  \n    const getnotes = async () => {\n\n        const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\",\n            },\n        });\n        const json = await response.json();\n        console.log(json)\n\n    };\n    // Add note\n    const addNote = async (title, description, tag) => {\n\n        const response = await fetch(`${host}/api/notes/addnote`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\",\n            },\n            body: JSON.stringify({ title, description, tag })\n        });\n        // const json = response.json();\n\n\n        const note = {\n            _id: \"622b0551890f1d12473288ad7\",\n            user: \"6228bd7cab58086b170f2cb2\",\n            title: title,\n            description: description,\n            tag: tag,\n            date: \"2022-03-11T08:16:17.292Z\",\n            __v: 0,\n        };\n        setNotes(notes.concat(note));\n    };\n\n    // delete note\n    const deleteNote = (id) => {\n        // console.log(\"deleting the note with \"+ id);\n        const newNotes = notes.filter((note) => {\n            return note._id !== id;\n        });\n        setNotes(newNotes);\n    };\n\n    // Edit note\n    const editNote = async (id, title, descripttion, tag) => {\n\n        const response = await fetch(`${host}/api/notes/updateNote/${id}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\",\n            },\n            body: JSON.stringify({ title, descripttion, tag })\n        });\n        const json= response.json();\n    \n    // logic to edit note in client\n    for (let index = 0; index < notes.length; index++) {\n        const element = notes[index];\n\n        if (element._id === id) {\n            element.title = title,\n                element.descripttion = descripttion,\n                element.tag = tag\n        }\n    }\n};\n\nreturn (\n    <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote, getnotes }}>\n        {props.children}\n    </NoteContext.Provider>\n);\n};\nexport default NoteState;\n"]},"metadata":{},"sourceType":"module"}