{"ast":null,"code":"var _jsxFileName = \"/Users/abhishekkumar/WebProject/notebook/inotebook/src/context/notes/NoteState.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\";\n  const notesInitial = [{\n    \"_id\": \"625c13299f37c746e763de90\",\n    \"user\": \"622c40662e6f61ffefca574d\",\n    \"title\": \"update tilte update3\",\n    \"description\": \"update description3\",\n    \"tag\": \"update tags 4\",\n    \"date\": \"2022-04-17T13:16:25.310Z\",\n    \"__v\": 0\n  }, {\n    \"_id\": \"625c13549f37c746e763de94\",\n    \"user\": \"622c40662e6f61ffefca574d\",\n    \"title\": \"my title 3\",\n    \"description\": \" abhi\",\n    \"tag\": \"personal\",\n    \"date\": \"2022-04-17T13:17:08.178Z\",\n    \"__v\": 0\n  }];\n  const [notes, setNotes] = useState(notesInitial); // Get all notes  \n\n  const getnotes = async () => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = await response.json(); // console.log(json)\n\n    setNotes(json);\n  }; // Add note\n\n\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    setNotes(notes.concat(note));\n  }; // delete note\n\n\n  const deleteNote = async id => {\n    // api call for delete note \n    const response = await fetch(`${host}/api/notes/deleteNote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      }\n    }); // const json= response.json();\n    // console.log(json)\n    // logic to delete  notes \n\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  }; // Edit note\n\n\n  const editNote = async (id, title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/updateNote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json();\n    let newNotes = JSON.parse(JSON.stringify(notes)); // logic to edit note in client\n\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n\n    setNotes(newNotes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getnotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["/Users/abhishekkumar/WebProject/notebook/inotebook/src/context/notes/NoteState.js"],"names":["useState","NoteContext","NoteState","props","host","notesInitial","notes","setNotes","getnotes","response","fetch","method","headers","localStorage","getItem","json","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","newNotes","filter","_id","editNote","parse","index","length","element","children"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAMC,IAAI,GAAG,uBAAb;AACA,QAAMC,YAAY,GAAG,CAAC;AAClB,WAAO,0BADW;AAElB,YAAQ,0BAFU;AAGlB,aAAS,sBAHS;AAIlB,mBAAe,qBAJG;AAKlB,WAAO,eALW;AAMlB,YAAQ,0BANU;AAOlB,WAAO;AAPW,GAAD,EASnB;AACE,WAAO,0BADT;AAEE,YAAQ,0BAFV;AAGE,aAAS,YAHX;AAIE,mBAAe,OAJjB;AAKE,WAAO,UALT;AAME,YAAQ,0BANV;AAOE,WAAO;AAPT,GATmB,CAArB;AAmBA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACK,YAAD,CAAlC,CArByB,CAuBzB;;AACA,QAAMG,QAAQ,GAAG,YAAY;AAEzB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,0BAAT,EAAoC;AAC5DO,MAAAA,MAAM,EAAE,KADoD;AAE5DC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sBAAaC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAFR;AAFmD,KAApC,CAA5B;AAOA,UAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACM,IAAT,EAAnB,CATyB,CAUzB;;AACAR,IAAAA,QAAQ,CAACQ,IAAD,CAAR;AAEH,GAbD,CAxByB,CAsCzB;;;AACA,QAAMC,OAAO,GAAG,OAAOC,KAAP,EAAcC,WAAd,EAA2BC,GAA3B,KAAmC;AAE/C,UAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,oBAAT,EAA8B;AACtDO,MAAAA,MAAM,EAAE,MAD8C;AAEtDC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sBAAaC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAFR,OAF6C;AAMtDM,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,QAAAA,KAAF;AAASC,QAAAA,WAAT;AAAsBC,QAAAA;AAAtB,OAAf;AANgD,KAA9B,CAA5B;AAQA,UAAMI,IAAI,GAAG,MAAMd,QAAQ,CAACM,IAAT,EAAnB;AAEAR,IAAAA,QAAQ,CAACD,KAAK,CAACkB,MAAN,CAAaD,IAAb,CAAD,CAAR;AACH,GAbD,CAvCyB,CAsDzB;;;AACA,QAAME,UAAU,GAAG,MAAOC,EAAP,IAAc;AAC7B;AACA,UAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,yBAAwBsB,EAAG,EAApC,EAAuC;AAC/Df,MAAAA,MAAM,EAAE,QADuD;AAE/DC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sBAAaC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAFR;AAFsD,KAAvC,CAA5B,CAF6B,CAU7B;AACA;AAEA;;AACA,UAAMa,QAAQ,GAAGrB,KAAK,CAACsB,MAAN,CAAcL,IAAD,IAAU;AACpC,aAAOA,IAAI,CAACM,GAAL,KAAaH,EAApB;AACH,KAFgB,CAAjB;AAGAnB,IAAAA,QAAQ,CAACoB,QAAD,CAAR;AACH,GAlBD,CAvDyB,CA2EzB;;;AACA,QAAMG,QAAQ,GAAG,OAAOJ,EAAP,EAAWT,KAAX,EAAkBC,WAAlB,EAA+BC,GAA/B,KAAuC;AAEpD,UAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,yBAAwBsB,EAAG,EAApC,EAAuC;AAC/Df,MAAAA,MAAM,EAAE,KADuD;AAE/DC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sBAAaC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAFR,OAFsD;AAM/DM,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,QAAAA,KAAF;AAASC,QAAAA,WAAT;AAAsBC,QAAAA;AAAtB,OAAf;AANyD,KAAvC,CAA5B;AAQA,UAAMJ,IAAI,GAAGN,QAAQ,CAACM,IAAT,EAAb;AAGA,QAAIY,QAAQ,GAAGN,IAAI,CAACU,KAAL,CAAWV,IAAI,CAACC,SAAL,CAAehB,KAAf,CAAX,CAAf,CAboD,CAcpD;;AACA,SAAK,IAAI0B,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGL,QAAQ,CAACM,MAArC,EAA6CD,KAAK,EAAlD,EAAsD;AAClD,YAAME,OAAO,GAAGP,QAAQ,CAACK,KAAD,CAAxB;;AAEA,UAAIE,OAAO,CAACL,GAAR,KAAgBH,EAApB,EAAwB;AACpBC,QAAAA,QAAQ,CAACK,KAAD,CAAR,CAAgBf,KAAhB,GAAwBA,KAAxB;AACAU,QAAAA,QAAQ,CAACK,KAAD,CAAR,CAAgBd,WAAhB,GAA8BA,WAA9B;AACAS,QAAAA,QAAQ,CAACK,KAAD,CAAR,CAAgBb,GAAhB,GAAsBA,GAAtB;AACA;AACH;AACJ;;AACDZ,IAAAA,QAAQ,CAACoB,QAAD,CAAR;AACH,GA1BD;;AA4BA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAErB,MAAAA,KAAF;AAASU,MAAAA,OAAT;AAAkBS,MAAAA,UAAlB;AAA8BK,MAAAA,QAA9B;AAAwCtB,MAAAA;AAAxC,KAA7B;AAAA,cACKL,KAAK,CAACgC;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA7GD;;GAAMjC,S;;KAAAA,S;AA8GN,eAAeA,SAAf","sourcesContent":["import { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\n\nconst NoteState = (props) => {\n    const host = \"http://localhost:5000\";\n    const notesInitial = [{\n        \"_id\": \"625c13299f37c746e763de90\",\n        \"user\": \"622c40662e6f61ffefca574d\",\n        \"title\": \"update tilte update3\",\n        \"description\": \"update description3\",\n        \"tag\": \"update tags 4\",\n        \"date\": \"2022-04-17T13:16:25.310Z\",\n        \"__v\": 0\n      },\n      {\n        \"_id\": \"625c13549f37c746e763de94\",\n        \"user\": \"622c40662e6f61ffefca574d\",\n        \"title\": \"my title 3\",\n        \"description\": \" abhi\",\n        \"tag\": \"personal\",\n        \"date\": \"2022-04-17T13:17:08.178Z\",\n        \"__v\": 0\n      },];\n\n    const [notes, setNotes] = useState(notesInitial);\n\n    // Get all notes  \n    const getnotes = async () => {\n\n        const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\":localStorage.getItem('token')\n            },\n        });\n        const json = await response.json();\n        // console.log(json)\n        setNotes(json)\n\n    };\n    // Add note\n    const addNote = async (title, description, tag) => {\n\n        const response = await fetch(`${host}/api/notes/addnote`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\":localStorage.getItem('token')\n            },\n            body: JSON.stringify({ title, description, tag })\n        });\n        const note = await response.json()\n        \n        setNotes(notes.concat(note));\n    };\n\n    // delete note\n    const deleteNote = async (id) => {\n        // api call for delete note \n        const response = await fetch(`${host}/api/notes/deleteNote/${id}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\":localStorage.getItem('token')\n            },\n\n        });\n        // const json= response.json();\n        // console.log(json)\n\n        // logic to delete  notes \n        const newNotes = notes.filter((note) => {\n            return note._id !== id;\n        });\n        setNotes(newNotes);\n    };\n\n    // Edit note\n    const editNote = async (id, title, description, tag) => {\n\n        const response = await fetch(`${host}/api/notes/updateNote/${id}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\":localStorage.getItem('token')\n            },\n            body: JSON.stringify({ title, description, tag })\n        });\n        const json = response.json();\n       \n\n        let newNotes = JSON.parse(JSON.stringify(notes))\n        // logic to edit note in client\n        for (let index = 0; index < newNotes.length; index++) {\n            const element = newNotes[index];\n\n            if (element._id === id) {\n                newNotes[index].title = title;\n                newNotes[index].description = description;\n                newNotes[index].tag = tag;\n                break;\n            }\n        }\n        setNotes(newNotes)\n    };\n\n    return (\n        <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote, getnotes }}>\n            {props.children}\n        </NoteContext.Provider>\n    );\n};\nexport default NoteState;\n"]},"metadata":{},"sourceType":"module"}