{"ast":null,"code":"var _jsxFileName = \"/Users/abhishekkumar/WebProject/notebook/inotebook/src/context/notes/NoteState.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  // const host = \"http://localhost:5000\";\n  // const notesInitial = [];\n  // const [notes, setNotes] = useState(notesInitial);\n  // // Get all notes  \n  // const getnotes = async () => {\n  //     const response = await fetch(`${host}api/notes/fetchallnotes`, {\n  //         method: \"GET\",\n  //         headers: {\n  //             \"Content-Type\": \"application/json\",\n  //             \"auth-token\":localStorage.getItem('token')\n  //         },\n  //     });\n  //     const note = await response.json();\n  //     // console.log(json)\n  //     setNotes(note)\n  // };\n  // // Add note\n  const addNote = async (title, description, tag) => {\n    // const response = await fetch(`${host}/api/notes/addnote`, {\n    //     method: \"POST\",\n    //     headers: {\n    //         \"Content-Type\": \"application/json\",\n    //         \"auth-token\":localStorage.getItem('token')\n    //     },\n    //     body: JSON.stringify({ title, description, tag })\n    // });\n    // const note = await response.json()\n    const note = {\n      \"_id\": \"625c13549f37c746e763d6e94\",\n      \"user\": \"622c40662e6f61ffefca574d\",\n      \"title\": title,\n      \"description\": description,\n      \"tag\": tag,\n      \"date\": \"2022-04-17T13:17:08.178Z\",\n      \"__v\": 0\n    };\n    setNotes(notes.concat(note));\n  }; // delete note\n\n\n  const deleteNote = async id => {\n    // api call for delete note \n    // const response = await fetch(`${host}/api/notes/deleteNote/${id}`, {\n    //     method: \"DELETE\",\n    //     headers: {\n    //         \"Content-Type\": \"application/json\",\n    //         \"auth-token\":localStorage.getItem('token')\n    //     },\n    // });\n    // const json= response.json();\n    // console.log(json)\n    // logic to delete  notes \n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  }; // // Edit note\n\n\n  const editNote = async (id, title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/updateNote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json();\n    let newNotes = JSON.parse(JSON.stringify(notes)); // logic to edit note in client\n\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n\n    setNotes(newNotes);\n  };\n\n  const notesInitial = [{\n    \"_id\": \"625c13299f37c746e763de90\",\n    \"user\": \"622c40662e6f61ffefca574d\",\n    \"title\": \"update tilte update3\",\n    \"description\": \"update description3\",\n    \"tag\": \"update tags 4\",\n    \"date\": \"2022-04-17T13:16:25.310Z\",\n    \"__v\": 0\n  }, {\n    \"_id\": \"625c13549f37c746e763de94\",\n    \"user\": \"622c40662e6f61ffefca574d\",\n    \"title\": \"my title 3\",\n    \"description\": \" abhi\",\n    \"tag\": \"personal\",\n    \"date\": \"2022-04-17T13:17:08.178Z\",\n    \"__v\": 0\n  }];\n  const [notes, setNotes] = useState(notesInitial);\n  return (\n    /*#__PURE__*/\n    // <NoteContext.Provider value={{ notes, setNotes, addNote, deleteNote, editNote, getnotes }}>\n    _jsxDEV(NoteContext.Provider, {\n      value: {\n        notes,\n        setNotes,\n        addNote,\n        deleteNote,\n        editNote\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["/Users/abhishekkumar/WebProject/notebook/inotebook/src/context/notes/NoteState.js"],"names":["useState","NoteContext","NoteState","props","addNote","title","description","tag","note","setNotes","notes","concat","deleteNote","id","newNotes","filter","_id","editNote","response","fetch","host","method","headers","localStorage","getItem","body","JSON","stringify","json","parse","index","length","element","notesInitial","children"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACzB;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,QAAMC,OAAO,GAAG,OAAOC,KAAP,EAAcC,WAAd,EAA2BC,GAA3B,KAAmC;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,UAAMC,IAAI,GAAG;AACT,aAAO,2BADE;AAET,cAAQ,0BAFC;AAGT,eAASH,KAHA;AAIT,qBAAeC,WAJN;AAKT,aAAOC,GALE;AAMT,cAAQ,0BANC;AAOT,aAAO;AAPE,KAAb;AASAE,IAAAA,QAAQ,CAACC,KAAK,CAACC,MAAN,CAAaH,IAAb,CAAD,CAAR;AACH,GAvBD,CAtByB,CA+CzB;;;AACA,QAAMI,UAAU,GAAG,MAAOC,EAAP,IAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA,UAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAcP,IAAD,IAAU;AACpC,aAAOA,IAAI,CAACQ,GAAL,KAAaH,EAApB;AACH,KAFgB,CAAjB;AAGAJ,IAAAA,QAAQ,CAACK,QAAD,CAAR;AACH,GAlBD,CAhDyB,CAoEzB;;;AACA,QAAMG,QAAQ,GAAG,OAAOJ,EAAP,EAAWR,KAAX,EAAkBC,WAAlB,EAA+BC,GAA/B,KAAuC;AAGpD,UAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,IAAK,yBAAwBP,EAAG,EAApC,EAAuC;AAC/DQ,MAAAA,MAAM,EAAE,KADuD;AAE/DC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sBAAaC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAFR,OAFsD;AAM/DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEtB,QAAAA,KAAF;AAASC,QAAAA,WAAT;AAAsBC,QAAAA;AAAtB,OAAf;AANyD,KAAvC,CAA5B;AAQA,UAAMqB,IAAI,GAAGV,QAAQ,CAACU,IAAT,EAAb;AAGA,QAAId,QAAQ,GAAGY,IAAI,CAACG,KAAL,CAAWH,IAAI,CAACC,SAAL,CAAejB,KAAf,CAAX,CAAf,CAdoD,CAgBpD;;AAEA,SAAK,IAAIoB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGhB,QAAQ,CAACiB,MAArC,EAA6CD,KAAK,EAAlD,EAAsD;AAClD,YAAME,OAAO,GAAGlB,QAAQ,CAACgB,KAAD,CAAxB;;AAEA,UAAIE,OAAO,CAAChB,GAAR,KAAgBH,EAApB,EAAwB;AACpBC,QAAAA,QAAQ,CAACgB,KAAD,CAAR,CAAgBzB,KAAhB,GAAwBA,KAAxB;AACAS,QAAAA,QAAQ,CAACgB,KAAD,CAAR,CAAgBxB,WAAhB,GAA8BA,WAA9B;AACAQ,QAAAA,QAAQ,CAACgB,KAAD,CAAR,CAAgBvB,GAAhB,GAAsBA,GAAtB;AACA;AACH;AACJ;;AACDE,IAAAA,QAAQ,CAACK,QAAD,CAAR;AACH,GA7BD;;AA+BA,QAAMmB,YAAY,GAAG,CACjB;AACI,WAAO,0BADX;AAEI,YAAQ,0BAFZ;AAGI,aAAS,sBAHb;AAII,mBAAe,qBAJnB;AAKI,WAAO,eALX;AAMI,YAAQ,0BANZ;AAOI,WAAO;AAPX,GADiB,EAUjB;AACI,WAAO,0BADX;AAEI,YAAQ,0BAFZ;AAGI,aAAS,YAHb;AAII,mBAAe,OAJnB;AAKI,WAAO,UALX;AAMI,YAAQ,0BANZ;AAOI,WAAO;AAPX,GAViB,CAArB;AAoBA,QAAM,CAACvB,KAAD,EAAQD,QAAR,IAAoBT,QAAQ,CAACiC,YAAD,CAAlC;AAQA;AAAA;AACI;AACA,YAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE;AAAEvB,QAAAA,KAAF;AAASD,QAAAA,QAAT;AAAmBL,QAAAA,OAAnB;AAA6BQ,QAAAA,UAA7B;AAA0CK,QAAAA;AAA1C,OAA7B;AAAA,gBACKd,KAAK,CAAC+B;AADX;AAAA;AAAA;AAAA;AAAA;AAFJ;AAMH,CAtID;;GAAMhC,S;;KAAAA,S;AAuIN,eAAeA,SAAf","sourcesContent":["import { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\n\nconst NoteState = (props) => {\n    // const host = \"http://localhost:5000\";\n    // const notesInitial = [];\n\n    // const [notes, setNotes] = useState(notesInitial);\n\n    // // Get all notes  \n    // const getnotes = async () => {\n\n    //     const response = await fetch(`${host}api/notes/fetchallnotes`, {\n    //         method: \"GET\",\n    //         headers: {\n    //             \"Content-Type\": \"application/json\",\n    //             \"auth-token\":localStorage.getItem('token')\n    //         },\n    //     });\n    //     const note = await response.json();\n    //     // console.log(json)\n    //     setNotes(note)\n\n    // };\n    // // Add note\n    const addNote = async (title, description, tag) => {\n\n        // const response = await fetch(`${host}/api/notes/addnote`, {\n        //     method: \"POST\",\n        //     headers: {\n        //         \"Content-Type\": \"application/json\",\n        //         \"auth-token\":localStorage.getItem('token')\n        //     },\n        //     body: JSON.stringify({ title, description, tag })\n        // });\n        // const note = await response.json()\n\n\n        const note = {\n            \"_id\": \"625c13549f37c746e763d6e94\",\n            \"user\": \"622c40662e6f61ffefca574d\",\n            \"title\": title,\n            \"description\": description,\n            \"tag\": tag,\n            \"date\": \"2022-04-17T13:17:08.178Z\",\n            \"__v\": 0\n        }\n        setNotes(notes.concat(note));\n    };\n\n    // delete note\n    const deleteNote = async (id) => {\n        // api call for delete note \n        // const response = await fetch(`${host}/api/notes/deleteNote/${id}`, {\n        //     method: \"DELETE\",\n        //     headers: {\n        //         \"Content-Type\": \"application/json\",\n        //         \"auth-token\":localStorage.getItem('token')\n        //     },\n\n        // });\n        // const json= response.json();\n        // console.log(json)\n\n        // logic to delete  notes \n        const newNotes = notes.filter((note) => {\n            return note._id !== id;\n        });\n        setNotes(newNotes);\n    };\n\n    // // Edit note\n    const editNote = async (id, title, description, tag) => {\n\n\n        const response = await fetch(`${host}/api/notes/updateNote/${id}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\":localStorage.getItem('token')\n            },\n            body: JSON.stringify({ title, description, tag })\n        });\n        const json = response.json();\n\n\n        let newNotes = JSON.parse(JSON.stringify(notes))\n\n        // logic to edit note in client\n        \n        for (let index = 0; index < newNotes.length; index++) {\n            const element = newNotes[index];\n\n            if (element._id === id) {\n                newNotes[index].title = title;\n                newNotes[index].description = description;\n                newNotes[index].tag = tag;\n                break;\n            }\n        }\n        setNotes(newNotes)\n    };\n\n    const notesInitial = [\n        {\n            \"_id\": \"625c13299f37c746e763de90\",\n            \"user\": \"622c40662e6f61ffefca574d\",\n            \"title\": \"update tilte update3\",\n            \"description\": \"update description3\",\n            \"tag\": \"update tags 4\",\n            \"date\": \"2022-04-17T13:16:25.310Z\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"625c13549f37c746e763de94\",\n            \"user\": \"622c40662e6f61ffefca574d\",\n            \"title\": \"my title 3\",\n            \"description\": \" abhi\",\n            \"tag\": \"personal\",\n            \"date\": \"2022-04-17T13:17:08.178Z\",\n            \"__v\": 0\n        },]\n\n    const [notes, setNotes] = useState(notesInitial);\n\n\n\n\n\n\n\n    return (\n        // <NoteContext.Provider value={{ notes, setNotes, addNote, deleteNote, editNote, getnotes }}>\n        <NoteContext.Provider value={{ notes, setNotes, addNote , deleteNote , editNote}}>\n            {props.children}\n        </NoteContext.Provider>\n    );\n};\nexport default NoteState;\n"]},"metadata":{},"sourceType":"module"}