{"ast":null,"code":"var _jsxFileName = \"/Users/abhishekkumar/WebProject/notebook/inotebook/src/context/notes/NoteState.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial); // Get all notes  \n\n  const getnotes = async () => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n      }\n    });\n    const json = await response.json();\n    setNotes(json); // console.log(json)\n  }; // // Add note\n\n\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    setNotes(notes.concat());\n  }; // delete note\n\n\n  const deleteNote = async id => {\n    // api call for delete note \n    const response = await fetch(`${host}/api/notes/deleteNote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n      }\n    });\n    const json = await response.json();\n    console.log(json); // logic to delete  notes \n\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  }; // // Edit note\n\n\n  const editNote = async (id, title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/updateNote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\" // \"auth-token\":localStorage.getItem('token')\n\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    console.log(json);\n    let newNotes = JSON.parse(JSON.stringify(notes)); // logic to edit note in client\n\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n\n    console.log(id, notes);\n    setNotes(newNotes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      setNotes,\n      addNote,\n      deleteNote,\n      editNote,\n      getnotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["/Users/abhishekkumar/WebProject/notebook/inotebook/src/context/notes/NoteState.js"],"names":["useState","NoteContext","NoteState","props","host","notesInitial","notes","setNotes","getnotes","response","fetch","method","headers","json","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","console","log","newNotes","filter","_id","editNote","parse","index","length","element","children"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAMC,IAAI,GAAG,uBAAb;AAEA,QAAMC,YAAY,GAAG,EAArB;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACK,YAAD,CAAlC,CALyB,CAOzB;;AACA,QAAMG,QAAQ,GAAG,YAAY;AAEzB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,0BAAT,EAAoC;AAC5DO,MAAAA,MAAM,EAAE,KADoD;AAE5DC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sBAAc;AAFT;AAFmD,KAApC,CAA5B;AAOA,UAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAT,EAAnB;AACAN,IAAAA,QAAQ,CAACM,IAAD,CAAR,CAVyB,CAWzB;AAEH,GAbD,CARyB,CAuBzB;;;AACA,QAAMC,OAAO,GAAG,OAAOC,KAAP,EAAcC,WAAd,EAA2BC,GAA3B,KAAmC;AAE/C,UAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,oBAAT,EAA8B;AACtDO,MAAAA,MAAM,EAAE,MAD8C;AAEtDC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sBAAc;AAFT,OAF6C;AAMtDM,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,QAAAA,KAAF;AAASC,QAAAA,WAAT;AAAsBC,QAAAA;AAAtB,OAAf;AANgD,KAA9B,CAA5B;AAQA,UAAMI,IAAI,GAAG,MAAMZ,QAAQ,CAACI,IAAT,EAAnB;AAEAN,IAAAA,QAAQ,CAACD,KAAK,CAACgB,MAAN,EAAD,CAAR;AACH,GAbD,CAxByB,CAuCzB;;;AACA,QAAMC,UAAU,GAAG,MAAOC,EAAP,IAAc;AAC7B;AACA,UAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,yBAAwBoB,EAAG,EAApC,EAAuC;AAC/Db,MAAAA,MAAM,EAAE,QADuD;AAE/DC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sBAAc;AAFT;AAFsD,KAAvC,CAA5B;AAQA,UAAMC,IAAI,GAAE,MAAMJ,QAAQ,CAACI,IAAT,EAAlB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ,EAX6B,CAa7B;;AACA,UAAMc,QAAQ,GAAGrB,KAAK,CAACsB,MAAN,CAAcP,IAAD,IAAU;AACpC,aAAOA,IAAI,CAACQ,GAAL,KAAaL,EAApB;AACH,KAFgB,CAAjB;AAGAjB,IAAAA,QAAQ,CAACoB,QAAD,CAAR;AACH,GAlBD,CAxCyB,CA4DzB;;;AACA,QAAMG,QAAQ,GAAG,OAAON,EAAP,EAAWT,KAAX,EAAkBC,WAAlB,EAA+BC,GAA/B,KAAuC;AAGpD,UAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,IAAK,yBAAwBoB,EAAG,EAApC,EAAuC;AAC/Db,MAAAA,MAAM,EAAE,KADuD;AAE/DC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sBAAc,kKAFT,CAGL;;AAHK,OAFsD;AAO/DM,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,QAAAA,KAAF;AAASC,QAAAA,WAAT;AAAsBC,QAAAA;AAAtB,OAAf;AAPyD,KAAvC,CAA5B;AASA,UAAMJ,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAT,EAAnB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AAEA,QAAIc,QAAQ,GAAGR,IAAI,CAACY,KAAL,CAAWZ,IAAI,CAACC,SAAL,CAAed,KAAf,CAAX,CAAf,CAfoD,CAiBpD;;AAEA,SAAK,IAAI0B,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGL,QAAQ,CAACM,MAArC,EAA6CD,KAAK,EAAlD,EAAsD;AAClD,YAAME,OAAO,GAAGP,QAAQ,CAACK,KAAD,CAAxB;;AAEA,UAAIE,OAAO,CAACL,GAAR,KAAgBL,EAApB,EAAwB;AACpBG,QAAAA,QAAQ,CAACK,KAAD,CAAR,CAAgBjB,KAAhB,GAAwBA,KAAxB;AACAY,QAAAA,QAAQ,CAACK,KAAD,CAAR,CAAgBhB,WAAhB,GAA8BA,WAA9B;AACAW,QAAAA,QAAQ,CAACK,KAAD,CAAR,CAAgBf,GAAhB,GAAsBA,GAAtB;AACA;AACH;AACJ;;AACDQ,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ,EAAgBlB,KAAhB;AAEAC,IAAAA,QAAQ,CAACoB,QAAD,CAAR;AACH,GAhCD;;AAkCA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAErB,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBO,MAAAA,OAAnB;AAA4BS,MAAAA,UAA5B;AAAwCO,MAAAA,QAAxC;AAAkDtB,MAAAA;AAAlD,KAA7B;AAAA,cACKL,KAAK,CAACgC;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CApGD;;GAAMjC,S;;KAAAA,S;AAqGN,eAAeA,SAAf","sourcesContent":["import { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\n\nconst NoteState = (props) => {\n    const host = \"http://localhost:5000\";\n\n    const notesInitial = [];\n\n    const [notes, setNotes] = useState(notesInitial);\n\n    // Get all notes  \n    const getnotes = async () => {\n\n        const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n            },\n        });\n        const json = await response.json();\n        setNotes(json)\n        // console.log(json)\n\n    };\n\n    // // Add note\n    const addNote = async (title, description, tag) => {\n\n        const response = await fetch(`${host}/api/notes/addnote`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n            },\n            body: JSON.stringify({ title, description, tag })\n        });\n        const note = await response.json()\n\n        setNotes(notes.concat());\n    };\n\n    // delete note\n    const deleteNote = async (id) => {\n        // api call for delete note \n        const response = await fetch(`${host}/api/notes/deleteNote/${id}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n            },\n\n        });\n        const json =await response.json();\n        console.log(json)\n\n        // logic to delete  notes \n        const newNotes = notes.filter((note) => {\n            return note._id !== id;\n        });\n        setNotes(newNotes);\n    };\n\n    // // Edit note\n    const editNote = async (id, title, description, tag) => {\n\n\n        const response = await fetch(`${host}/api/notes/updateNote/${id}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n                // \"auth-token\":localStorage.getItem('token')\n            },\n            body: JSON.stringify({ title, description, tag })\n        });\n        const json = await response.json();\n        console.log(json)\n\n        let newNotes = JSON.parse(JSON.stringify(notes))\n\n        // logic to edit note in client\n\n        for (let index = 0; index < newNotes.length; index++) {\n            const element = newNotes[index];\n\n            if (element._id === id) {\n                newNotes[index].title = title;\n                newNotes[index].description = description;\n                newNotes[index].tag = tag;\n                break;\n            }\n        }\n        console.log(id, notes)\n\n        setNotes(newNotes)\n    };\n\n    return (\n        <NoteContext.Provider value={{ notes, setNotes, addNote, deleteNote, editNote, getnotes }}>\n            {props.children}\n        </NoteContext.Provider>\n    );\n};\nexport default NoteState;\n"]},"metadata":{},"sourceType":"module"}