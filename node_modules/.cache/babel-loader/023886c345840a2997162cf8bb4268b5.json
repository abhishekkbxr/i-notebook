{"ast":null,"code":"var _jsxFileName = \"/Users/abhishekkumar/WebProject/notebook/inotebook/src/context/notes/NoteState.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial); // Get all notes  \n\n  const getnotes = async () => {\n    const response = await fetch(`${host}api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n      }\n    });\n    const note = await response.json();\n    console.log(json); // setNotes(note)\n  }; // // Add note\n\n\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    const notea = {\n      \"_id\": \"625c13549f37c746e763d6e94\",\n      \"user\": \"622c40662e6f61ffefca574d\",\n      \"title\": title,\n      \"description\": description,\n      \"tag\": tag,\n      \"date\": \"2022-04-17T13:17:08.178Z\",\n      \"__v\": 0\n    };\n    setNotes(notes.concat(notea));\n  }; // delete note\n\n\n  const deleteNote = async id => {\n    // api call for delete note \n    // const response = await fetch(`${host}/api/notes/deleteNote/${id}`, {\n    //     method: \"DELETE\",\n    //     headers: {\n    //         \"Content-Type\": \"application/json\",\n    //         \"auth-token\":localStorage.getItem('token')\n    //     },\n    // });\n    // const json= response.json();\n    // console.log(json)\n    // logic to delete  notes \n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  }; // // Edit note\n\n\n  const editNote = async (id, title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/updateNote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\" // \"auth-token\":localStorage.getItem('token')\n\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json();\n    let newNotes = JSON.parse(JSON.stringify(notes)); // logic to edit note in client\n\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n\n    setNotes(newNotes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      setNotes,\n      addNote,\n      deleteNote,\n      editNote,\n      getnotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["/Users/abhishekkumar/WebProject/notebook/inotebook/src/context/notes/NoteState.js"],"names":["useState","NoteContext","NoteState","props","host","notesInitial","notes","setNotes","getnotes","response","fetch","method","headers","note","json","console","log","addNote","title","description","tag","body","JSON","stringify","notea","concat","deleteNote","id","newNotes","filter","_id","editNote","parse","index","length","element","children"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\n\nconst NoteState = (props) => {\n    const host = \"http://localhost:5000\";\n\n    const notesInitial = [];\n\n    const [notes, setNotes] = useState(notesInitial);\n\n    // Get all notes  \n    const getnotes = async () => {\n\n        const response = await fetch(`${host}api/notes/fetchallnotes`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n            },\n        });\n        const note = await response.json();\n        console.log(json)\n        // setNotes(note)\n\n    };\n\n    // // Add note\n    const addNote = async (title, description, tag) => {\n\n        const response = await fetch(`${host}/api/notes/addnote`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n            },\n            body: JSON.stringify({ title, description, tag })\n        });\n        const note = await response.json()\n\n\n        const notea = {\n            \"_id\": \"625c13549f37c746e763d6e94\",\n            \"user\": \"622c40662e6f61ffefca574d\",\n            \"title\": title,\n            \"description\": description,\n            \"tag\": tag,\n            \"date\": \"2022-04-17T13:17:08.178Z\",\n            \"__v\": 0\n        }\n        setNotes(notes.concat(notea));\n    };\n\n    // delete note\n    const deleteNote = async (id) => {\n        // api call for delete note \n        // const response = await fetch(`${host}/api/notes/deleteNote/${id}`, {\n        //     method: \"DELETE\",\n        //     headers: {\n        //         \"Content-Type\": \"application/json\",\n        //         \"auth-token\":localStorage.getItem('token')\n        //     },\n\n        // });\n        // const json= response.json();\n        // console.log(json)\n\n        // logic to delete  notes \n        const newNotes = notes.filter((note) => {\n            return note._id !== id;\n        });\n        setNotes(newNotes);\n    };\n\n    // // Edit note\n    const editNote = async (id, title, description, tag) => {\n\n\n        const response = await fetch(`${host}/api/notes/updateNote/${id}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n                // \"auth-token\":localStorage.getItem('token')\n            },\n            body: JSON.stringify({ title, description, tag })\n        });\n        const json = response.json();\n\n        let newNotes = JSON.parse(JSON.stringify(notes))\n\n        // logic to edit note in client\n\n        for (let index = 0; index < newNotes.length; index++) {\n            const element = newNotes[index];\n\n            if (element._id === id) {\n                newNotes[index].title = title;\n                newNotes[index].description = description;\n                newNotes[index].tag = tag;\n                break;\n            }\n        }\n\n        setNotes(newNotes)\n    };\n\n    return (\n        <NoteContext.Provider value={{ notes, setNotes, addNote, deleteNote, editNote , getnotes }}>\n            {props.children}\n        </NoteContext.Provider>\n    );\n};\nexport default NoteState;\n"]},"metadata":{},"sourceType":"module"}