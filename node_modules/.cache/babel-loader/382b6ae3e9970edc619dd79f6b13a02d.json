{"ast":null,"code":"var _jsxFileName = \"/Users/abhishekkumar/project folder/notebook/inotebook/src/context/notes/NoteState.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\";\n  const notesInitial = [{\n    _id: \"622b0549890f1d1273288ad51\",\n    user: \"6228bd7cab58086b170f2cb2\",\n    title: \"my name\",\n    description: \" abhishek\",\n    tag: \"personal\",\n    date: \"2022-03-11T08:16:09.942Z\",\n    __v: 0\n  }, {\n    _id: \"622b0549890f1d1273288ad52\",\n    user: \"6228bd7cab58086b170f2cb2\",\n    title: \"my name\",\n    description: \" abhishek\",\n    tag: \"personal\",\n    date: \"2022-03-11T08:16:09.942Z\",\n    __v: 0\n  }, {\n    _id: \"622b0549890f1d1273288ad53\",\n    user: \"6228bd7cab58086b170f2cb2\",\n    title: \"my name\",\n    description: \" abhishek\",\n    tag: \"personal\",\n    date: \"2022-03-11T08:16:09.942Z\",\n    __v: 0\n  }];\n  const [notes, setNotes] = useState(notesInitial); // Add note\n\n  const addNote = async (title, description, tag) => {\n    const response = await fetch(`${host}api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    }); // const json = response.json();\n\n    const note = {\n      _id: \"622b0551890f1d12473288ad7\",\n      user: \"6228bd7cab58086b170f2cb2\",\n      title: title,\n      description: description,\n      tag: tag,\n      date: \"2022-03-11T08:16:17.292Z\",\n      __v: 0\n    };\n    setNotes(notes.concat(note));\n  }; // delete note\n\n\n  const deleteNote = id => {\n    // console.log(\"deleting the note with \"+ id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  }; // Edit note\n\n\n  const editNote = async (id, title, descripttion, tag) => {\n    // API call\n    // const response = await fetch(url, {\n    //     method: 'POST',\n    //     headers: {\n    //         'Content-Type': 'application/json'\n    //     },\n    // });\n    const response = await fetch(`${host}/api/notes/updateNote/${id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\"\n      },\n      body: JSON.stringify({\n        title,\n        descripttion,\n        tag\n      })\n    }); // logic to edit note in client\n\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n\n      if (element._id === id) {\n        element.title = title, element.descripttion = descripttion, element.tag = tag;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["/Users/abhishekkumar/project folder/notebook/inotebook/src/context/notes/NoteState.js"],"names":["useState","NoteContext","NoteState","props","host","notesInitial","_id","user","title","description","tag","date","__v","notes","setNotes","addNote","response","fetch","method","headers","body","JSON","stringify","note","concat","deleteNote","id","newNotes","filter","editNote","descripttion","index","length","element","children"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\n\nconst NoteState = (props) => {\n    const host = \"http://localhost:5000\";\n    const notesInitial = [\n        {\n            _id: \"622b0549890f1d1273288ad51\",\n            user: \"6228bd7cab58086b170f2cb2\",\n            title: \"my name\",\n            description: \" abhishek\",\n            tag: \"personal\",\n            date: \"2022-03-11T08:16:09.942Z\",\n            __v: 0,\n        },\n        {\n            _id: \"622b0549890f1d1273288ad52\",\n            user: \"6228bd7cab58086b170f2cb2\",\n            title: \"my name\",\n            description: \" abhishek\",\n            tag: \"personal\",\n            date: \"2022-03-11T08:16:09.942Z\",\n            __v: 0,\n        },\n        {\n            _id: \"622b0549890f1d1273288ad53\",\n            user: \"6228bd7cab58086b170f2cb2\",\n            title: \"my name\",\n            description: \" abhishek\",\n            tag: \"personal\",\n            date: \"2022-03-11T08:16:09.942Z\",\n            __v: 0,\n        },\n    ];\n\n    const [notes, setNotes] = useState(notesInitial);\n\n    // Add note\n    const addNote = async (title, description, tag) => {\n        \n        const response = await fetch(`${host}api/notes/addnote`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\",\n            },\n            body:JSON.stringify({title ,description ,tag})\n        });\n        // const json = response.json();\n\n\n        const note = {\n            _id: \"622b0551890f1d12473288ad7\",\n            user: \"6228bd7cab58086b170f2cb2\",\n            title: title,\n            description: description,\n            tag: tag,\n            date: \"2022-03-11T08:16:17.292Z\",\n            __v: 0,\n        };\n        setNotes(notes.concat(note));\n    };\n\n    // delete note\n    const deleteNote = (id) => {\n        // console.log(\"deleting the note with \"+ id);\n        const newNotes = notes.filter((note) => {\n            return note._id !== id;\n        });\n        setNotes(newNotes);\n    };\n\n    // Edit note\n    const editNote = async (id, title, descripttion, tag) => {\n        // API call\n        // const response = await fetch(url, {\n        //     method: 'POST',\n        //     headers: {\n        //         'Content-Type': 'application/json'\n\n        //     },\n\n        // });\n        const response = await fetch(`${host}/api/notes/updateNote/${id}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjIyYzQwNjYyZTZmNjFmZmVmY2E1NzRkIn0sImlhdCI6MTY0NzA2NzI2M30.uezmBiRR8TDBBQ0OHXsHucznQXB6KQe5sQhrnzMfPRI\",\n            },\n            body:JSON.stringify({title ,descripttion ,tag})\n        });\n\n        // logic to edit note in client\n        for (let index = 0; index < notes.length; index++) {\n            const element = notes[index];\n            if (element._id === id) {\n                (element.title = title),\n                    (element.descripttion = descripttion),\n                    (element.tag = tag);\n            }\n        }\n    };\n\n    return (\n        <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote }}>\n            {props.children}\n        </NoteContext.Provider>\n    );\n};\nexport default NoteState;\n"]},"metadata":{},"sourceType":"module"}